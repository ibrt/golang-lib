// Code generated by MockGen. DO NOT EDIT.
// Source: ./../command.go
//
// Generated by this command:
//
//	mockgen -typed -source ./../command.go -destination ./mocks.gen.go -package tshellz
//

// Package tshellz is a generated GoMock package.
package tshellz

import (
	exec "os/exec"
	reflect "reflect"

	shellz "github.com/ibrt/golang-lib/shellz"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecCmdCombinedOutput mocks base method.
func (m *MockExecutor) ExecCmdCombinedOutput(c *shellz.Command, cmd *exec.Cmd) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmdCombinedOutput", c, cmd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmdCombinedOutput indicates an expected call of ExecCmdCombinedOutput.
func (mr *MockExecutorMockRecorder) ExecCmdCombinedOutput(c, cmd any) *MockExecutorExecCmdCombinedOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdCombinedOutput", reflect.TypeOf((*MockExecutor)(nil).ExecCmdCombinedOutput), c, cmd)
	return &MockExecutorExecCmdCombinedOutputCall{Call: call}
}

// MockExecutorExecCmdCombinedOutputCall wrap *gomock.Call
type MockExecutorExecCmdCombinedOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecCmdCombinedOutputCall) Return(arg0 []byte, arg1 error) *MockExecutorExecCmdCombinedOutputCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecCmdCombinedOutputCall) Do(f func(*shellz.Command, *exec.Cmd) ([]byte, error)) *MockExecutorExecCmdCombinedOutputCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecCmdCombinedOutputCall) DoAndReturn(f func(*shellz.Command, *exec.Cmd) ([]byte, error)) *MockExecutorExecCmdCombinedOutputCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ExecCmdOutput mocks base method.
func (m *MockExecutor) ExecCmdOutput(c *shellz.Command, cmd *exec.Cmd) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmdOutput", c, cmd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmdOutput indicates an expected call of ExecCmdOutput.
func (mr *MockExecutorMockRecorder) ExecCmdOutput(c, cmd any) *MockExecutorExecCmdOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdOutput", reflect.TypeOf((*MockExecutor)(nil).ExecCmdOutput), c, cmd)
	return &MockExecutorExecCmdOutputCall{Call: call}
}

// MockExecutorExecCmdOutputCall wrap *gomock.Call
type MockExecutorExecCmdOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecCmdOutputCall) Return(arg0 []byte, arg1 error) *MockExecutorExecCmdOutputCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecCmdOutputCall) Do(f func(*shellz.Command, *exec.Cmd) ([]byte, error)) *MockExecutorExecCmdOutputCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecCmdOutputCall) DoAndReturn(f func(*shellz.Command, *exec.Cmd) ([]byte, error)) *MockExecutorExecCmdOutputCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ExecCmdRun mocks base method.
func (m *MockExecutor) ExecCmdRun(c *shellz.Command, cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmdRun", c, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCmdRun indicates an expected call of ExecCmdRun.
func (mr *MockExecutorMockRecorder) ExecCmdRun(c, cmd any) *MockExecutorExecCmdRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdRun", reflect.TypeOf((*MockExecutor)(nil).ExecCmdRun), c, cmd)
	return &MockExecutorExecCmdRunCall{Call: call}
}

// MockExecutorExecCmdRunCall wrap *gomock.Call
type MockExecutorExecCmdRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecCmdRunCall) Return(arg0 error) *MockExecutorExecCmdRunCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecCmdRunCall) Do(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdRunCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecCmdRunCall) DoAndReturn(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdRunCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ExecCmdStart mocks base method.
func (m *MockExecutor) ExecCmdStart(c *shellz.Command, cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmdStart", c, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCmdStart indicates an expected call of ExecCmdStart.
func (mr *MockExecutorMockRecorder) ExecCmdStart(c, cmd any) *MockExecutorExecCmdStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdStart", reflect.TypeOf((*MockExecutor)(nil).ExecCmdStart), c, cmd)
	return &MockExecutorExecCmdStartCall{Call: call}
}

// MockExecutorExecCmdStartCall wrap *gomock.Call
type MockExecutorExecCmdStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecCmdStartCall) Return(arg0 error) *MockExecutorExecCmdStartCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecCmdStartCall) Do(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdStartCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecCmdStartCall) DoAndReturn(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdStartCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ExecCmdWait mocks base method.
func (m *MockExecutor) ExecCmdWait(c *shellz.Command, cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmdWait", c, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCmdWait indicates an expected call of ExecCmdWait.
func (mr *MockExecutorMockRecorder) ExecCmdWait(c, cmd any) *MockExecutorExecCmdWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdWait", reflect.TypeOf((*MockExecutor)(nil).ExecCmdWait), c, cmd)
	return &MockExecutorExecCmdWaitCall{Call: call}
}

// MockExecutorExecCmdWaitCall wrap *gomock.Call
type MockExecutorExecCmdWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecCmdWaitCall) Return(arg0 error) *MockExecutorExecCmdWaitCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecCmdWaitCall) Do(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdWaitCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecCmdWaitCall) DoAndReturn(f func(*shellz.Command, *exec.Cmd) error) *MockExecutorExecCmdWaitCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ExecLookPath mocks base method.
func (m *MockExecutor) ExecLookPath(c *shellz.Command, file string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecLookPath", c, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecLookPath indicates an expected call of ExecLookPath.
func (mr *MockExecutorMockRecorder) ExecLookPath(c, file any) *MockExecutorExecLookPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecLookPath", reflect.TypeOf((*MockExecutor)(nil).ExecLookPath), c, file)
	return &MockExecutorExecLookPathCall{Call: call}
}

// MockExecutorExecLookPathCall wrap *gomock.Call
type MockExecutorExecLookPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorExecLookPathCall) Return(arg0 string, arg1 error) *MockExecutorExecLookPathCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorExecLookPathCall) Do(f func(*shellz.Command, string) (string, error)) *MockExecutorExecLookPathCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorExecLookPathCall) DoAndReturn(f func(*shellz.Command, string) (string, error)) *MockExecutorExecLookPathCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// OSChdir mocks base method.
func (m *MockExecutor) OSChdir(c *shellz.Command, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSChdir", c, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSChdir indicates an expected call of OSChdir.
func (mr *MockExecutorMockRecorder) OSChdir(c, dir any) *MockExecutorOSChdirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSChdir", reflect.TypeOf((*MockExecutor)(nil).OSChdir), c, dir)
	return &MockExecutorOSChdirCall{Call: call}
}

// MockExecutorOSChdirCall wrap *gomock.Call
type MockExecutorOSChdirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorOSChdirCall) Return(arg0 error) *MockExecutorOSChdirCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorOSChdirCall) Do(f func(*shellz.Command, string) error) *MockExecutorOSChdirCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorOSChdirCall) DoAndReturn(f func(*shellz.Command, string) error) *MockExecutorOSChdirCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// SyscallExec mocks base method.
func (m *MockExecutor) SyscallExec(c *shellz.Command, argv0 string, argv, envv []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallExec", c, argv0, argv, envv)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyscallExec indicates an expected call of SyscallExec.
func (mr *MockExecutorMockRecorder) SyscallExec(c, argv0, argv, envv any) *MockExecutorSyscallExecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallExec", reflect.TypeOf((*MockExecutor)(nil).SyscallExec), c, argv0, argv, envv)
	return &MockExecutorSyscallExecCall{Call: call}
}

// MockExecutorSyscallExecCall wrap *gomock.Call
type MockExecutorSyscallExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockExecutorSyscallExecCall) Return(arg0 error) *MockExecutorSyscallExecCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockExecutorSyscallExecCall) Do(f func(*shellz.Command, string, []string, []string) error) *MockExecutorSyscallExecCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockExecutorSyscallExecCall) DoAndReturn(f func(*shellz.Command, string, []string, []string) error) *MockExecutorSyscallExecCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
